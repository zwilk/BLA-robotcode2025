package frc.robot.commands.Drive;

import java.util.function.DoubleSupplier;

import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.subsystems.Drivetrain;

public class CartesianDrive extends CommandBase {
  private final DoubleSupplier m_ySpeed;
  private final DoubleSupplier m_xSpeed;
  private final DoubleSupplier m_zRotation;
  private final Drivetrain m_drive;

  /**
   * Main command to drive the robot.
   * @param ySpeed The robot's speed along the Y axis [-1.0..1.0]. Forward is positive.
   * @param xSpeed The robot's speed along the X axis [-1.0..1.0]. Right is positive.
   * @param zRotation The robot's rotation rate around the Z axis [-1.0..1.0]. Clockwise is positive.
   * @param drive The drivetrain subsystem
   */
  public CartesianDrive(DoubleSupplier ySpeed, DoubleSupplier xSpeed, DoubleSupplier zRotation, Drivetrain drive) {
    // Use addRequirements() here to declare subsystem dependencies.
    m_ySpeed = ySpeed;
    m_xSpeed = xSpeed;
    m_zRotation = zRotation;
    m_drive = drive;
    addRequirements(m_drive);
  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {}

  // Called every time the scheduler runs while the command is scheduled.
  // Gets the driving mode to use field-oriented controls or not. 
  @Override
  public void execute() {
    if(m_drive.getFieldDriveMode()) {
      m_drive.driveCartesian(m_ySpeed.getAsDouble(), m_xSpeed.getAsDouble(), m_zRotation.getAsDouble(), m_drive.getGyroAngle());
    } else {
      m_drive.driveCartesian(m_ySpeed.getAsDouble(), m_xSpeed.getAsDouble(), m_zRotation.getAsDouble());
    }
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {
    m_drive.stopDrive();
  }

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return false;
  }
}