package frc.robot.commands.Drive;

import edu.wpi.first.wpilibj2.command.CommandBase;
// import frc.robot.Constants.DriveConstants;
import frc.robot.subsystems.Drivetrain;

public class DriveBackDistance extends CommandBase {
  private final double m_distance;
  private final double m_speed;
  private final Drivetrain m_drive;
  private double encoderOffset;

  /**
   * Command that drives the robot back a certain distance.
   * <p>It drives backwards at halfspeed for a set distance.
   * @param distance The distance to drive in meters.
   * @param drive The drivetrain subsystem
   */
  public DriveBackDistance(double distance, double speed, Drivetrain drive) {
    // Use addRequirements() here to declare subsystem dependencies.
    m_distance = distance;
    m_speed = speed;
    m_drive = drive;
    addRequirements(m_drive);
  }

  // Called when the command is initially scheduled.
  @Override
  public void initialize() {
    encoderOffset = m_drive.getAverageDistance();
  }

  // Called every time the scheduler runs while the command is scheduled.
  @Override
  public void execute() {
    m_drive.driveCartesian(-m_speed, 0, 0);
  }

  // Called once the command ends or is interrupted.
  @Override
  public void end(boolean interrupted) {
    m_drive.stopDrive();
  }

  // Returns true when the command should end.
  @Override
  public boolean isFinished() {
    return Math.abs( m_drive.getAverageDistance() - encoderOffset) >= m_distance;
  }
}